{"version":3,"sources":["js/canvas/index.js","js/constants.js","js/store/actions.js","js/store/reducers.js","js/store/state.js","js/store/index.js","js/lib.js","js/initializeGameState.js","js/render/renderStart.js","js/render/renderPlaying.js","js/render/renderEnd.js","js/render/index.js","js/index.js"],"names":["initializeCanvas","canvas","document","querySelector","context","getContext","style","width","window","innerWidth","height","innerHeight","devicePixelRatio","scale","SQUARE_SIZE","START","PLAYING","END","UP","DOWN","LEFT","RIGHT","CHANGE_GAME_STATUS","UPDATE_SNAKE","SET_DIRECTION","UPDATE_FOOD_LOCATION","changeGameStatus","status","type","updateSnake","locations","setDirection","direction","updateFoodLocation","location","root","statusReducer","state","action","snakeReducer","directionReducer","foodReducer","x","y","snake","food","getState","dispatch","setFood","store","Math","random","initializeGameState","getCenter","initializeSnake","center","initializeDirection","renderStart","TITLE","INSTRUCTIONS","registeredKeyListener","getKeyListener","key","unregisterKeyListener","registerKeyListener","keyListener","addEventListener","removeEventListener","drawStart","fillStyle","font","measureText","fillText","drawInstructions","renderPlaying","UPDATE_INTERVAL","keyToDirection","ArrowUp","ArrowDown","ArrowLeft","ArrowRight","prevTimestamp","prevDirection","prevFood","drawSquareWithContext","color","fillRect","drawSnake","drawSquare","forEach","drawFood","isValidLocation","intersects","some","abs","getNextSnakeHead","length","nextX","nextY","timestamp","nextHead","nextSnake","slice","push","renderEnd","PRIMARY","SECONDARY","drawPrimary","drawSecondary","start","renderStatus","render","clearRect","requestAnimationFrame"],"mappings":"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","file":"js.e462f4d1.map","sourceRoot":"../src","sourcesContent":["const initializeCanvas = () => {\n\tconst canvas = document.querySelector('canvas')\n\tconst context = canvas.getContext('2d')\n\n\t// Scale canvas to prevent blurriness on Retina displays\n\tcanvas.style.width = `${window.innerWidth}px`\n\tcanvas.style.height = `${window.innerHeight}px`\n\tcanvas.width = window.innerWidth * window.devicePixelRatio\n\tcanvas.height = window.innerHeight * window.devicePixelRatio\n\tcontext.scale(window.devicePixelRatio, window.devicePixelRatio)\n\n\treturn context\n}\n\nexport default initializeCanvas\n","export const SQUARE_SIZE = 8\n\n// Game status\nexport const START = 'START'\nexport const PLAYING = 'PLAYING'\nexport const END = 'END'\n\n// Direction\nexport const UP = 'UP'\nexport const DOWN = 'DOWN'\nexport const LEFT = 'LEFT'\nexport const RIGHT = 'RIGHT'\n","export const CHANGE_GAME_STATUS = 'CHANGE_GAME_STATUS'\nexport const UPDATE_SNAKE = 'UPDATE_SNAKE'\nexport const SET_DIRECTION = 'SET_DIRECTION'\nexport const UPDATE_FOOD_LOCATION = 'UPDATE_FOOD_LOCATION'\n\nexport const changeGameStatus = status => ({\n\ttype: CHANGE_GAME_STATUS,\n\tstatus,\n})\n\nexport const updateSnake = locations => ({\n\ttype: UPDATE_SNAKE,\n\tlocations,\n})\n\nexport const setDirection = direction => ({\n\ttype: SET_DIRECTION,\n\tdirection,\n})\n\nexport const updateFoodLocation = location => ({\n\ttype: UPDATE_FOOD_LOCATION,\n\tlocation,\n})\n","import {START, UP} from '../constants'\nimport {\n\tCHANGE_GAME_STATUS,\n\tUPDATE_SNAKE,\n\tSET_DIRECTION,\n\tUPDATE_FOOD_LOCATION,\n} from './actions'\n\nconst statusReducer = (state = START, action) => {\n\tif (action.type === CHANGE_GAME_STATUS) {\n\t\treturn action.status\n\t}\n\treturn state\n}\n\nconst snakeReducer = (state = [], action) => {\n\tif (action.type === UPDATE_SNAKE) {\n\t\treturn action.locations\n\t}\n\treturn state\n}\n\nconst directionReducer = (state = UP, action) => {\n\tif (action.type === SET_DIRECTION) {\n\t\treturn action.direction\n\t}\n\treturn state\n}\n\nconst foodReducer = (state = {x: 0, y: 0}, action) => {\n\tif (action.type === UPDATE_FOOD_LOCATION) {\n\t\treturn action.location\n\t}\n\treturn state\n}\n\nconst root = (state = {}, action = {}) => ({\n\tstatus: statusReducer(state.status, action),\n\tsnake: snakeReducer(state.snake, action),\n\tdirection: directionReducer(state.direction, action),\n\tfood: foodReducer(state.food, action),\n})\n\nexport default root\n","import root from './reducers'\n\nlet state = root()\n\nconst getState = () => state\n\nconst dispatch = action => {\n\tstate = root(state, action)\n}\n\nexport {getState, dispatch}\n","import {getState, dispatch} from './state'\nimport {\n\tchangeGameStatus,\n\tupdateSnake,\n\tsetDirection,\n\tupdateFoodLocation,\n} from './actions'\n\nexport default {\n\tgetState,\n\tdispatch,\n\tchangeGameStatus,\n\tupdateSnake,\n\tsetDirection,\n\tupdateFoodLocation,\n}\n","import {SQUARE_SIZE} from './constants'\n\nconst setFood = store => {\n\tconst x = Math.random() * (window.innerWidth - SQUARE_SIZE)\n\tconst y = Math.random() * (window.innerHeight - SQUARE_SIZE)\n\tstore.dispatch(store.updateFoodLocation({x, y}))\n}\n\nexport {setFood}\n","import {SQUARE_SIZE, UP} from './constants'\nimport {setFood} from './lib'\n\nconst getCenter = () => ({\n\tx: (window.innerWidth / 2) - (SQUARE_SIZE / 2),\n\ty: (window.innerHeight / 2) - (SQUARE_SIZE / 2),\n})\n\nconst initializeSnake = store => {\n\tconst center = getCenter()\n\tstore.dispatch(store.updateSnake([center]))\n}\n\nconst initializeDirection = store => {\n\tstore.dispatch(store.setDirection(UP))\n}\n\nconst initializeGameState = store => {\n\tinitializeSnake(store)\n\tinitializeDirection(store) \n\tsetFood(store)\n}\n\nexport default initializeGameState\n","import {PLAYING} from '../constants'\nimport initializeGameState from '../initializeGameState'\n\nconst TITLE = 'Snake'\nconst INSTRUCTIONS = `Press 'R' to start`\n\nlet registeredKeyListener = null\n\nconst getKeyListener = store => ({key}) => {\n\tif (key === 'r') {\n\t\tunregisterKeyListener()\n\t\tinitializeGameState(store)\n\t\tstore.dispatch(store.changeGameStatus(PLAYING))\n\t}\n}\n\nconst registerKeyListener = store => {\n\tconst keyListener = getKeyListener(store)\n\twindow.addEventListener('keypress', keyListener)\n\tregisteredKeyListener = keyListener\n}\n\nconst unregisterKeyListener = () => {\n\twindow.removeEventListener('keypress', registeredKeyListener)\n\tregisteredKeyListener = null\n}\n\nconst drawStart = context => {\n\tcontext.fillStyle = '#ff0'\n\tcontext.font = '96px Mali, sans-serif'\n\n\tconst {width} = context.measureText(TITLE)\n\tconst x = (window.innerWidth / 2) - (width / 2)\n\tconst y = window.innerHeight * 0.4\n\n\tcontext.fillText(TITLE, x, y)\n}\n\nconst drawInstructions = context => {\n\tcontext.fillStyle = '#fff'\n\tcontext.font = '48px Mali, sans-serif'\n\n\tconst {width} = context.measureText(INSTRUCTIONS)\n\tconst x = (window.innerWidth / 2) - (width / 2)\n\tconst y = window.innerHeight * 0.55\n\n\tcontext.fillText(INSTRUCTIONS, x, y)\n}\n\nconst renderStart = (context, store) => {\n\tif (registeredKeyListener === null) {\n\t\tregisterKeyListener(store)\n\t}\n\n\tdrawStart(context)\n\tdrawInstructions(context)\n}\n\nexport default renderStart\n","import {SQUARE_SIZE, END, UP, DOWN, LEFT, RIGHT} from '../constants'\nimport {setFood} from '../lib'\n\nconst UPDATE_INTERVAL = 20\nconst keyToDirection = {\n\tArrowUp: UP,\n\tArrowDown: DOWN,\n\tArrowLeft: LEFT,\n\tArrowRight: RIGHT,\n}\n\nlet prevTimestamp = 0\nlet prevDirection = UP\nlet prevFood = null\nlet registeredKeyListener = null\n\nconst getKeyListener = store => ({key}) => {\n\tconst direction = keyToDirection[key]\n\n\tif (direction) {\n\t\tstore.dispatch(store.setDirection(direction))\n\t}\n}\n\nconst registerKeyListener = store => {\n\tconst keyListener = getKeyListener(store)\n\twindow.addEventListener('keydown', keyListener)\n\tregisteredKeyListener = keyListener\n}\n\nconst unregisterKeyListener = () => {\n\twindow.removeEventListener('keydown', registeredKeyListener)\n\tregisteredKeyListener = null\n}\n\nconst drawSquareWithContext = context => ({x, y}, color = '#fff') => {\n\tcontext.fillStyle = color\n\tcontext.fillRect(x, y, SQUARE_SIZE, SQUARE_SIZE)\n}\n\nconst drawSnake = (context, snake) => {\n\tconst drawSquare = drawSquareWithContext(context)\n\tsnake.forEach(location => drawSquare(location))\n}\n\nconst drawFood = (context, food) => {\n\tconst drawSquare = drawSquareWithContext(context)\n\tdrawSquare(food, '#ff0')\n}\n\nconst isValidLocation = (x, y) => (\n\t0 <= x &&\n\tx <= window.innerWidth - SQUARE_SIZE &&\n\t0 <= y &&\n\ty <= window.innerHeight - SQUARE_SIZE\n)\n\nconst intersects = (location, locations) =>\n\tlocations.some(\n\t\t({x, y}) =>\n\t\t\tMath.abs(location.x - x) < SQUARE_SIZE &&\n\t\t\tMath.abs(location.y - y) < SQUARE_SIZE\n\t)\n\nconst getNextSnakeHead = (snake, direction) => {\n\tconst {x, y} = snake[snake.length - 1]\n\n\tlet nextX = x\n\tlet nextY = y\n\n\tif (direction === UP) {\n\t\tnextY -= SQUARE_SIZE\n\t} else if (direction === DOWN) {\n\t\tnextY += SQUARE_SIZE\n\t} else if (direction === LEFT) {\n\t\tnextX -= SQUARE_SIZE\n\t} else if (direction === RIGHT) {\n\t\tnextX += SQUARE_SIZE\n\t}\n\n\treturn {x: nextX, y: nextY}\n}\n\nconst renderPlaying = (context, store, timestamp) => {\n\tif (registeredKeyListener === null) {\n\t\tregisterKeyListener(store)\n\t}\n\n\tconst {snake, direction, food} = store.getState()\n\n\tdrawSnake(context, snake)\n\tdrawFood(context, food)\n\n\t// No need to update\n\tif (\n\t\ttimestamp - prevTimestamp < UPDATE_INTERVAL &&\n\t\tdirection === prevDirection &&\n\t\tfood === prevFood) {\n\t\treturn\n\t}\n\n\tconst nextHead = getNextSnakeHead(snake, direction)\n\tlet nextSnake\n\n\tif (intersects(nextHead, [food])) {\n\t\tsetFood(store)\n\t\tnextSnake = [...snake]\n\t} else {\n\t\tnextSnake = snake.slice(1)\n\t}\n\n\tconst isValid =\n\t\tisValidLocation(nextHead.x, nextHead.y) &&\n\t\t!intersects(nextHead, nextSnake)\n\n\tif (!isValid) {\n\t\tunregisterKeyListener()\n\t\tstore.dispatch(store.changeGameStatus(END))\n\t\treturn\n\t}\n\n\tnextSnake.push(nextHead)\n\tstore.dispatch(store.updateSnake(nextSnake))\n\tprevTimestamp = timestamp\n\tprevDirection = direction\n\tprevFood = food\n}\n\nexport default renderPlaying\n","import {PLAYING} from '../constants'\nimport initializeGameState from '../initializeGameState'\n\nconst PRIMARY = 'GAME OVER'\nconst SECONDARY = 'Thanks for playing!'\nconst INSTRUCTIONS = `Press 'R' to play again`\n\nlet registeredKeyListener = null\n\nconst getKeyListener = store => ({key}) => {\n\tif (key === 'r') {\n\t\tunregisterKeyListener()\n\t\tinitializeGameState(store)\n\t\tstore.dispatch(store.changeGameStatus(PLAYING))\n\t}\n}\n\nconst registerKeyListener = store => {\n\tconst keyListener = getKeyListener(store)\n\twindow.addEventListener('keypress', keyListener)\n\tregisteredKeyListener = keyListener\n}\n\nconst unregisterKeyListener = () => {\n\twindow.removeEventListener('keypress', registeredKeyListener)\n\tregisteredKeyListener = null\n}\n\nconst drawPrimary = context => {\n\tcontext.fillStyle = '#f00'\n\tcontext.font = '96px Mali, sans-serif'\n\n\tconst {width} = context.measureText(PRIMARY)\n\tconst x = (window.innerWidth / 2) - (width / 2)\n\tconst y = window.innerHeight * 0.4\n\n\tcontext.fillText(PRIMARY, x, y)\n}\n\nconst drawSecondary = context => {\n\tcontext.fillStyle = '#fff'\n\tcontext.font = '36px Mali, sans-serif'\n\n\tconst {width} = context.measureText(SECONDARY)\n\tconst x = (window.innerWidth / 2) - (width / 2)\n\tconst y = window.innerHeight * 0.515\n\n\tcontext.fillText(SECONDARY, x, y)\n}\n\nconst drawInstructions = context => {\n\tcontext.fillStyle = '#fff'\n\tcontext.font = '48px Mali, sans-serif'\n\n\tconst {width} = context.measureText(INSTRUCTIONS)\n\tconst x = (window.innerWidth / 2) - (width / 2)\n\tconst y = window.innerHeight * 0.65\n\n\tcontext.fillText(INSTRUCTIONS, x, y)\n}\n\nconst renderEnd = (context, store) => {\n\tif (registeredKeyListener === null) {\n\t\tregisterKeyListener(store)\n\t}\n\n\tdrawPrimary(context)\n\tdrawSecondary(context)\n\tdrawInstructions(context)\n}\n\nexport default renderEnd\n","import {START, PLAYING, END} from '../constants'\nimport renderStart from './renderStart'\nimport renderPlaying from './renderPlaying'\nimport renderEnd from './renderEnd'\n\nconst renderStatus = {\n\t[START]: renderStart,\n\t[PLAYING]: renderPlaying,\n\t[END]: renderEnd,\n}\n\nconst start = (context, store) => {\n\tconst render = timestamp => {\n\t\tconst {status} = store.getState()\n\t\tcontext.clearRect(0, 0, window.innerWidth, window.innerHeight)\n\t\trenderStatus[status](context, store, timestamp)\n\t\twindow.requestAnimationFrame(render)\n\t}\n\trender()\n}\n\nexport default start\n","import '../css/main.css'\nimport initializeCanvas from './canvas'\nimport store from './store'\nimport start from './render'\n\nconst context = initializeCanvas()\nstart(context, store)\n"]}